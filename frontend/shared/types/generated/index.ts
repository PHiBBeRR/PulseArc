// Auto-generated types from Rust backend
// Generated by ts-rs via: cargo xtask codegen
// DO NOT EDIT MANUALLY - changes will be overwritten

export type { AcceptPatch } from './AcceptPatch';
export type { ActivityBreakdown } from './ActivityBreakdown';
export type { ActivityBreakdownEvidence } from './ActivityBreakdownEvidence';
export type { ActivityCategory } from './ActivityCategory';
export type { ActivityContext } from './ActivityContext';
export type { ActivityMetadata } from './ActivityMetadata';
export type { ActivitySegment } from './ActivitySegment';
export type { ActivitySnapshot } from './ActivitySnapshot';
export type { AiBatchStatus } from './AiBatchStatus';
export type { BatchProcessingResult } from './BatchProcessingResult';
export type { BatchQueue } from './BatchQueue';
export type { BatchStats } from './BatchStats';
export type { BatchStatus } from './BatchStatus';
export type { BlockClassification } from './BlockClassification';
export type { BlockClassificationResponse } from './BlockClassificationResponse';
export type { BlockConfig } from './BlockConfig';
export type { BlockEvidence } from './BlockEvidence';
export type { CalendarConnectionStatus } from './CalendarConnectionStatus';
export type { CalendarEvent } from './CalendarEvent';
export type { CalendarEventParams } from './CalendarEventParams';
export type { CalendarEventRow } from './CalendarEventRow';
export type { CalendarSyncSettings } from './CalendarSyncSettings';
export type { CalendarSyncSettingsParams } from './CalendarSyncSettingsParams';
export type { CalendarSyncSettingsRow } from './CalendarSyncSettingsRow';
export type { CalendarTokenRow } from './CalendarTokenRow';
export type { ClassificationMetrics } from './ClassificationMetrics';
export type { ClassificationMode } from './ClassificationMode';
export type { ClassificationSource } from './ClassificationSource';
export type { ClassifiedTimeEntry } from './ClassifiedTimeEntry';
export type { ClassifierUsageStats } from './ClassifierUsageStats';
export type { ConfidenceEvidence } from './ConfidenceEvidence';
export type { ContextPart } from './ContextPart';
export type { DatabaseSize } from './DatabaseSize';
export type { DatabaseStats } from './DatabaseStats';
export type { DlqBatch } from './DlqBatch';
export type { DrainStats } from './DrainStats';
export type { EvidenceSignals } from './EvidenceSignals';
export type { HealthStatus } from './HealthStatus';
export type { IdMapping } from './IdMapping';
export type { IdleConfig } from './IdleConfig';
export type { IdlePeriod } from './IdlePeriod';
export type { IdleSummary } from './IdleSummary';
export type { OpenAIBatchResponse } from './OpenAIBatchResponse';
export type { OutboxStats } from './OutboxStats';
export type { OutboxStatus } from './OutboxStatus';
export type { OutboxStatusSummary } from './OutboxStatusSummary';
export type { ParsedFields } from './ParsedFields';
export type { PauseReason } from './PauseReason';
export type { PrismaTimeEntryDto } from './PrismaTimeEntryDto';
export type { Project } from './Project';
export type { ProjectWithWbs } from './ProjectWithWbs';
export type { ProposedBlock } from './ProposedBlock';
export type { SapSyncSettings } from './SapSyncSettings';
export type { SuggestionFeedbackParams } from './SuggestionFeedbackParams';
export type { SyncStats } from './SyncStats';
export type { TableStats } from './TableStats';
export type { TimeEntry } from './TimeEntry';
export type { TimeEntryAnalytics } from './TimeEntryAnalytics';
export type { TimeEntryOutbox } from './TimeEntryOutbox';
export type { TimeRange } from './TimeRange';
export type { TimelineCalendarEvent } from './TimelineCalendarEvent';
export type { TokenUsage } from './TokenUsage';
export type { TrainingReport } from './TrainingReport';
export type { TrainingStats } from './TrainingStats';
export type { UserCostSummary } from './UserCostSummary';
export type { UserProfile } from './UserProfile';
export type { WbsElement } from './WbsElement';
export type { WindowContext } from './WindowContext';
export type { WorkLocation } from './WorkLocation';
export type { WorkType } from './WorkType';
