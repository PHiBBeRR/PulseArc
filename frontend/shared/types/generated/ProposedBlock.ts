// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ActivityBreakdown } from "./ActivityBreakdown";
import type { WorkLocation } from "./WorkLocation";

/**
 * A proposed time block (30+ minutes of consolidated work)
 */
export type ProposedBlock = {
  /**
   * Unique identifier for the block
   */
  id: string;
  /**
   * Start timestamp (Unix epoch seconds)
   */
  start_ts: number;
  /**
   * End timestamp (Unix epoch seconds)
   */
  end_ts: number;
  /**
   * Total duration in seconds
   */
  duration_secs: number;
  /**
   * Inferred project ID (e.g., "USC0063201")
   */
  inferred_project_id: string | null;
  /**
   * Inferred WBS code (e.g., "USC0063201.1.1")
   */
  inferred_wbs_code: string | null;
  /**
   * Inferred deal/project name (e.g., "Project Astro")
   */
  inferred_deal_name: string | null;
  /**
   * Inferred workstream (e.g., "modeling", "due_diligence")
   */
  inferred_workstream: string | null;
  /**
   * Whether this block is billable
   */
  billable: boolean;
  /**
   * Confidence score (0.0 to 1.0)
   */
  confidence: number;
  /**
   * Which classifier was used (FEATURE-030)
   */
  classifier_used: string | null;
  /**
   * Breakdown of activities within the block
   */
  activities: Array<ActivityBreakdown>;
  /**
   * IDs of snapshots that compose this block (internal traceability)
   */
  snapshot_ids: Array<string>;
  /**
   * IDs of segments that compose this block (internal traceability)
   * REFACTOR-004: Added for layered traceability (segments â†’ blocks)
   */
  segment_ids: Array<string>;
  /**
   * Reasoning for project assignment and classification
   */
  reasons: Array<string>;
  /**
   * Block status: "suggested", "accepted", "rejected", "edited"
   */
  status: string;
  /**
   * When the block was created (Unix epoch seconds)
   */
  created_at: number;
  /**
   * When the user reviewed the block (Unix epoch seconds)
   */
  reviewed_at: number;
  /**
   * Total idle time within block (for analytics)
   */
  total_idle_secs: number;
  /**
   * Idle handling strategy: 'exclude' | 'include' | 'partial'
   */
  idle_handling: string;
  /**
   * User timezone (e.g., "America/Denver")
   */
  timezone: string | null;
  /**
   * Work location (home/office/travel)
   */
  work_location: WorkLocation | null;
  /**
   * Flag for travel time blocks (flights, trains, etc.)
   */
  is_travel: boolean;
  /**
   * Flag for weekend work
   */
  is_weekend: boolean;
  /**
   * Flag for after-hours work (outside 8am-6pm)
   */
  is_after_hours: boolean;
  /**
   * Whether this block overlaps with any calendar events
   */
  has_calendar_overlap: boolean;
  /**
   * IDs of calendar events that overlap with this block
   */
  overlapping_event_ids: Array<string>;
  /**
   * Whether multiple calendar events overlap at the same time
   * (double-booked)
   */
  is_double_booked: boolean;
};
