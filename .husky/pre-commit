#!/bin/sh
################################################################################
# FAST PRE-COMMIT HOOK - Optimized for speed                                   #
################################################################################

# Early exit if SKIP_TESTS=1 is set (for emergency commits)
if [ "$SKIP_TESTS" = "1" ]; then
  echo "‚ö†Ô∏è  SKIP_TESTS=1 detected - bypassing all checks"
  exit 0
fi

# Get staged files ONCE (only tracked files, excludes .gitignore by default)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Early exit if no files
if [ -z "$STAGED_FILES" ]; then
  exit 0
fi

# Categorize files (single pass)
FRONTEND_CHANGED=$(echo "$STAGED_FILES" | grep -E '^(frontend/|package\.json|vite\.config|tsconfig)' || true)
RUST_CHANGED=$(echo "$STAGED_FILES" | grep -E '^crates/' || true)

# Count files
FRONTEND_COUNT=$(echo "$FRONTEND_CHANGED" | grep -c . || echo "0")
RUST_COUNT=$(echo "$RUST_CHANGED" | grep -c . || echo "0")

echo "üìä Staged: Frontend=$FRONTEND_COUNT Rust=$RUST_COUNT"
echo ""

# Exit code tracking
FAILED=0

# ============================================================================
# FRONTEND CHECKS (parallel when possible)
# ============================================================================
if [ "$FRONTEND_COUNT" -gt 0 ]; then
  echo "üé® Frontend checks..."

  # TypeScript check
  echo "  ‚Üí TypeScript..."
  TS_OUTPUT=$(pnpm exec tsc --noEmit 2>&1 | grep "error TS" || true)
  if [ -z "$TS_OUTPUT" ]; then
    echo "    ‚úÖ Types OK"
  else
    echo "    ‚ùå Type errors found"
    echo "$TS_OUTPUT" | head -5
    echo "    Run: pnpm exec tsc --noEmit"
    FAILED=1
  fi

  # ESLint (exclude tools/docs/reusable from .gitignore)
  echo "  ‚Üí ESLint..."
  ESLINT_OUTPUT=$(pnpm exec eslint . --quiet 2>&1 || true)
  if [ -z "$ESLINT_OUTPUT" ]; then
    echo "    ‚úÖ Lint OK"
  else
    echo "    ‚ùå Lint errors found"
    echo "$ESLINT_OUTPUT" | head -10
    echo "    Run: pnpm exec eslint . --fix"
    FAILED=1
  fi

  # Frontend tests - SKIP (too slow for pre-commit, rely on CI/manual runs)
  echo "  ‚Üí Tests skipped (run manually: pnpm test)"

  echo ""
fi

# ============================================================================
# RUST CHECKS (parallel when possible)
# ============================================================================
if [ "$RUST_COUNT" -gt 0 ]; then
  echo "ü¶Ä Rust checks..."

  # Clippy (check only, no auto-fix) - workspace level (exclude xtask)
  echo "  ‚Üí Clippy..."
  if cargo clippy --workspace --exclude xtask --quiet 2>&1 | grep -E "^error"; then
    echo "    ‚ùå Clippy errors"
    echo "    Run: cargo clippy --workspace --exclude xtask"
    FAILED=1
  else
    echo "    ‚úÖ Clippy OK"
  fi

  # Format check - workspace level (use nightly for enhanced features)
  echo "  ‚Üí Format..."
  if cargo +nightly fmt --all --check 2>&1 | grep -E "^Diff"; then
    echo "    ‚ùå Format issues"
    echo "    Run: cargo +nightly fmt --all"
    FAILED=1
  else
    echo "    ‚úÖ Format OK"
  fi

  # Compilation check (smart strategy)
  RUST_TEST_FILES=$(echo "$RUST_CHANGED" | grep '^crates/.*/tests/' || true)
  if [ -z "$RUST_TEST_FILES" ]; then
    echo "  ‚Üí Compile (workspace)..."
    if ! cargo check --workspace --quiet 2>&1; then
      echo "    ‚ùå Compilation failed"
      echo "    Run: cargo check --workspace"
      FAILED=1
    else
      echo "    ‚úÖ Compile OK"
    fi
  else
    echo "  ‚Üí Compile (all targets)..."
    if ! cargo check --workspace --all-targets --quiet 2>&1; then
      echo "    ‚ùå Compilation failed"
      echo "    Run: cargo check --workspace --all-targets"
      FAILED=1
    else
      echo "    ‚úÖ Compile OK"
    fi
  fi

  # Tests - SKIP (too slow for pre-commit, rely on CI/manual runs)
  echo "  ‚Üí Tests skipped (run manually: cargo test)"

  echo ""
fi

# ============================================================================
# SUMMARY
# ============================================================================
if [ $FAILED -ne 0 ]; then
  echo "‚ùå COMMIT BLOCKED - Fix errors above"
  exit 1
fi

echo "‚úÖ All checks passed - committing..."
exit 0
